{"version":3,"sources":["Components/Form.js","Components/Todo.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","date","Date","fullDate","getDate","getMonth","getFullYear","preventDefault","text","completed","id","Math","random","dateAdded","toast","error","position","autoClose","transition","Slide","closeOnClick","draggable","hideProgressBar","name","limit","Todo","todo","style","marginLeft","console","log","map","item","filter","el","TodoList","filteredTodos","App","appInfo","useState","status","setFilteredTodos","saveLocalTodos","useCallback","localStorage","setItem","JSON","stringify","useEffect","getItem","localTodo","parse","getLocalTodos","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1df113ff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { ToastContainer, toast, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../CSS/toastify.css\";\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\r\n  //Here i can write javascript code and function, w/e...\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const submitTodoHandler = (e) => {\r\n    let date = new Date();\r\n    let fullDate = date.getDate()+'-'+(date.getMonth()+1)+'-'+date.getFullYear();\r\n    e.preventDefault();\r\n    //Input validator\r\n    if (inputText !== \"\") {\r\n      setTodos([\r\n        ...todos,\r\n        { text: inputText, completed: false, id: Math.random() * 1000, dateAdded: fullDate },\r\n      ]);\r\n    } else {\r\n      toast.error(\"Task name is required!\", {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        transition: Slide,\r\n        closeOnClick: true,\r\n        draggable: true,\r\n        hideProgressBar: false,\r\n      });\r\n    }\r\n    setInputText(\"\");\r\n  };\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <input\r\n          value={inputText}\r\n          onChange={inputTextHandler}\r\n          type=\"text\"\r\n          className=\"todo-input\"\r\n        />\r\n        <button\r\n          onClick={submitTodoHandler}\r\n          className=\"todo-button\"\r\n          type=\"submit\"\r\n        >\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        autoClose={4000}\r\n        limit={1}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n  \r\n  //Events\r\n  const deleteHandler = () => {\r\n    setTodos(todos.filter((el) => el.id !== todo.id));\r\n    // console.log(todo);\r\n  };\r\n  const completeHandler = () => {\r\n    console.log(todo.dateAdded)\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === todo.id) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <div className=\"date\">\r\n        <p style={{ marginLeft: \"1rem\" }}>{todo.dateAdded}</p>\r\n      </div>\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>\r\n        {text}\r\n      </li>\r\n      <button onClick={completeHandler} className=\"complete-btn\">\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button onClick={deleteHandler} className=\"trash-btn\">\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\n//Import Components\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(todo => (\r\n          <Todo setTodos={setTodos} todos={todos} key={todo.id} todo={todo} text={todo.text} /> //id={todo.id}\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./CSS/App.css\";\r\n//Importing custom components\r\nimport Form from \"./Components/Form\";\r\nimport TodoList from \"./Components/TodoList\";\r\n\r\nfunction App() {\r\n  //State Stuff\r\n  const appInfo = [\"Welcome!\", \"This is a simple 'To-do' list app.\" ];\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [status, setStatus] = useState(\"all\");\r\n  const [filteredTodos, setFilteredTodos] = useState([]);\r\n\r\n  //Save to Local\r\n  const saveLocalTodos = useCallback(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  //Get from Local\r\n  const getLocalTodos = () => {\r\n    if (localStorage.getItem(\"todos\") === null) {\r\n      localStorage.setItem(\"todos\", JSON.stringify([]));\r\n    } else {\r\n      let localTodo = JSON.parse(localStorage.getItem(\"todos\"));\r\n      setTodos(localTodo);\r\n    }\r\n  };\r\n\r\n  //RUN ONCE WHEN THE APP START\r\n  useEffect(() => {\r\n    getLocalTodos();\r\n  }, []);\r\n\r\n  //Use effect\r\n  useEffect(() => {\r\n    //Function refactored filterHandler\r\n    const filterHandler = () => {\r\n        switch (status) {\r\n          case \"completed\":\r\n            setFilteredTodos(todos.filter((todo) => todo.completed === true));\r\n            break;\r\n          case \"uncompleted\":\r\n            setFilteredTodos(todos.filter((todo) => todo.completed === false));\r\n            break;\r\n          default:\r\n            setFilteredTodos(todos);\r\n            break;\r\n        }\r\n      }\r\n    filterHandler();\r\n    saveLocalTodos();\r\n  }, [todos, status, saveLocalTodos]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>{appInfo[0]}</h1>\r\n        <p>{appInfo[1]}</p>\r\n      </header>\r\n      <Form\r\n        inputText={inputText}\r\n        todos={todos}\r\n        setTodos={setTodos}\r\n        setInputText={setInputText}\r\n        setStatus={setStatus}\r\n      />\r\n      <TodoList\r\n        setTodos={setTodos}\r\n        todos={todos}\r\n        filteredTodos={filteredTodos}\r\n      />\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CSS/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}